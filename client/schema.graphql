# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type About {
  id: ID!
  name: String
  content: About_content_Document
}

type About_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input AboutWhereUniqueInput {
  id: ID
  name: String
}

input AboutWhereInput {
  AND: [AboutWhereInput!]
  OR: [AboutWhereInput!]
  NOT: [AboutWhereInput!]
  id: IDFilter
  name: StringFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input AboutOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input AboutUpdateInput {
  name: String
  content: JSON
}

input AboutUpdateArgs {
  where: AboutWhereUniqueInput!
  data: AboutUpdateInput!
}

input AboutCreateInput {
  name: String
  content: JSON
}

type BigPicture {
  id: ID!
  name: String
  content: BigPicture_content_Document
}

type BigPicture_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input BigPictureWhereUniqueInput {
  id: ID
  name: String
}

input BigPictureWhereInput {
  AND: [BigPictureWhereInput!]
  OR: [BigPictureWhereInput!]
  NOT: [BigPictureWhereInput!]
  id: IDFilter
  name: StringFilter
}

input BigPictureOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input BigPictureUpdateInput {
  name: String
  content: JSON
}

input BigPictureUpdateArgs {
  where: BigPictureWhereUniqueInput!
  data: BigPictureUpdateInput!
}

input BigPictureCreateInput {
  name: String
  content: JSON
}

type Community {
  id: ID!
  name: String
  values: Community_values_Document
}

type Community_values_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input CommunityWhereUniqueInput {
  id: ID
  name: String
}

input CommunityWhereInput {
  AND: [CommunityWhereInput!]
  OR: [CommunityWhereInput!]
  NOT: [CommunityWhereInput!]
  id: IDFilter
  name: StringFilter
}

input CommunityOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input CommunityUpdateInput {
  name: String
  values: JSON
}

input CommunityUpdateArgs {
  where: CommunityWhereUniqueInput!
  data: CommunityUpdateInput!
}

input CommunityCreateInput {
  name: String
  values: JSON
}

type Event {
  id: ID!
  name: String
  key: String
  createdDate: DateTime
  enabled: Boolean
  thumbnail: CloudinaryImage_File
  thumbAltText: String
  eventDate: DateTime
  registrationLink: String
  address: String
  blurb: String
  content: Event_content_Document
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

type CloudinaryImage_File {
  id: ID
  filename: String
  originalFilename: String
  mimetype: String
  encoding: String
  publicId: String
  publicUrl: String
  publicUrlTransformed(transformation: CloudinaryImageFormat): String
}

"""
Mirrors the formatting options [Cloudinary provides](https://cloudinary.com/documentation/image_transformation_reference).
All options are strings as they ultimately end up in a URL.
"""
input CloudinaryImageFormat {
  """
  Rewrites the filename to be this pretty string. Do not include `/` or `.`
  """
  prettyName: String
  width: String
  height: String
  crop: String
  aspect_ratio: String
  gravity: String
  zoom: String
  x: String
  y: String
  format: String
  fetch_format: String
  quality: String
  radius: String
  angle: String
  effect: String
  opacity: String
  border: String
  background: String
  overlay: String
  underlay: String
  default_image: String
  delay: String
  color: String
  color_space: String
  dpr: String
  page: String
  density: String
  flags: String
  transformation: String
}

type Event_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input EventWhereUniqueInput {
  id: ID
  key: String
}

input EventWhereInput {
  AND: [EventWhereInput!]
  OR: [EventWhereInput!]
  NOT: [EventWhereInput!]
  id: IDFilter
  name: StringFilter
  key: StringFilter
  createdDate: DateTimeNullableFilter
  enabled: BooleanFilter
  thumbAltText: StringFilter
  eventDate: DateTimeFilter
  registrationLink: StringFilter
  address: StringFilter
  blurb: StringFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input EventOrderByInput {
  id: OrderDirection
  name: OrderDirection
  key: OrderDirection
  createdDate: OrderDirection
  enabled: OrderDirection
  thumbAltText: OrderDirection
  eventDate: OrderDirection
  registrationLink: OrderDirection
  address: OrderDirection
  blurb: OrderDirection
}

input EventUpdateInput {
  name: String
  key: String
  createdDate: DateTime
  enabled: Boolean
  thumbnail: Upload
  thumbAltText: String
  eventDate: DateTime
  registrationLink: String
  address: String
  blurb: String
  content: JSON
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input EventUpdateArgs {
  where: EventWhereUniqueInput!
  data: EventUpdateInput!
}

input EventCreateInput {
  name: String
  key: String
  createdDate: DateTime
  enabled: Boolean
  thumbnail: Upload
  thumbAltText: String
  eventDate: DateTime
  registrationLink: String
  address: String
  blurb: String
  content: JSON
}

type Filter {
  id: ID!
  name: String
  key: String
  enabled: Boolean
  type: FilterTypeType
  section: FilterSectionType
}

enum FilterTypeType {
  Voices
  Media
  Departments
  Year
  Department
  Partner
  Faculty
  Semester
}

enum FilterSectionType {
  media
  studio
}

input FilterWhereUniqueInput {
  id: ID
}

input FilterWhereInput {
  AND: [FilterWhereInput!]
  OR: [FilterWhereInput!]
  NOT: [FilterWhereInput!]
  id: IDFilter
  name: StringFilter
  key: StringFilter
  enabled: BooleanFilter
  type: FilterTypeTypeNullableFilter
  section: FilterSectionTypeNullableFilter
}

input FilterTypeTypeNullableFilter {
  equals: FilterTypeType
  in: [FilterTypeType!]
  notIn: [FilterTypeType!]
  not: FilterTypeTypeNullableFilter
}

input FilterSectionTypeNullableFilter {
  equals: FilterSectionType
  in: [FilterSectionType!]
  notIn: [FilterSectionType!]
  not: FilterSectionTypeNullableFilter
}

input FilterOrderByInput {
  id: OrderDirection
  name: OrderDirection
  key: OrderDirection
  enabled: OrderDirection
  type: OrderDirection
  section: OrderDirection
}

input FilterUpdateInput {
  name: String
  key: String
  enabled: Boolean
  type: FilterTypeType
  section: FilterSectionType
}

input FilterUpdateArgs {
  where: FilterWhereUniqueInput!
  data: FilterUpdateInput!
}

input FilterCreateInput {
  name: String
  key: String
  enabled: Boolean
  type: FilterTypeType
  section: FilterSectionType
}

type Home {
  id: ID!
  name: String
  intro: Home_intro_Document
  slides(
    where: HomeSlideWhereInput! = {}
    orderBy: [HomeSlideOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [HomeSlide!]
  slidesCount(where: HomeSlideWhereInput! = {}): Int
}

type Home_intro_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input HomeWhereUniqueInput {
  id: ID
  name: String
}

input HomeWhereInput {
  AND: [HomeWhereInput!]
  OR: [HomeWhereInput!]
  NOT: [HomeWhereInput!]
  id: IDFilter
  name: StringFilter
  slides: HomeSlideManyRelationFilter
}

input HomeSlideManyRelationFilter {
  every: HomeSlideWhereInput
  some: HomeSlideWhereInput
  none: HomeSlideWhereInput
}

input HomeOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input HomeUpdateInput {
  name: String
  intro: JSON
  slides: HomeSlideRelateToManyForUpdateInput
}

input HomeSlideRelateToManyForUpdateInput {
  disconnect: [HomeSlideWhereUniqueInput!]
  set: [HomeSlideWhereUniqueInput!]
  create: [HomeSlideCreateInput!]
  connect: [HomeSlideWhereUniqueInput!]
}

input HomeUpdateArgs {
  where: HomeWhereUniqueInput!
  data: HomeUpdateInput!
}

input HomeCreateInput {
  name: String
  intro: JSON
  slides: HomeSlideRelateToManyForCreateInput
}

input HomeSlideRelateToManyForCreateInput {
  create: [HomeSlideCreateInput!]
  connect: [HomeSlideWhereUniqueInput!]
}

type HomeSlide {
  id: ID!
  homeSlides(
    where: HomeWhereInput! = {}
    orderBy: [HomeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Home!]
  homeSlidesCount(where: HomeWhereInput! = {}): Int
  image: CloudinaryImage_File
  altText: String
  quote: String
}

input HomeSlideWhereUniqueInput {
  id: ID
}

input HomeSlideWhereInput {
  AND: [HomeSlideWhereInput!]
  OR: [HomeSlideWhereInput!]
  NOT: [HomeSlideWhereInput!]
  id: IDFilter
  homeSlides: HomeManyRelationFilter
  altText: StringFilter
  quote: StringFilter
}

input HomeManyRelationFilter {
  every: HomeWhereInput
  some: HomeWhereInput
  none: HomeWhereInput
}

input HomeSlideOrderByInput {
  id: OrderDirection
  altText: OrderDirection
  quote: OrderDirection
}

input HomeSlideUpdateInput {
  homeSlides: HomeRelateToManyForUpdateInput
  image: Upload
  altText: String
  quote: String
}

input HomeRelateToManyForUpdateInput {
  disconnect: [HomeWhereUniqueInput!]
  set: [HomeWhereUniqueInput!]
  create: [HomeCreateInput!]
  connect: [HomeWhereUniqueInput!]
}

input HomeSlideUpdateArgs {
  where: HomeSlideWhereUniqueInput!
  data: HomeSlideUpdateInput!
}

input HomeSlideCreateInput {
  homeSlides: HomeRelateToManyForCreateInput
  image: Upload
  altText: String
  quote: String
}

input HomeRelateToManyForCreateInput {
  create: [HomeCreateInput!]
  connect: [HomeWhereUniqueInput!]
}

type MediaItem {
  id: ID!
  title: String
  key: String
  createdDate: DateTime
  enabled: Boolean
  thumbnail: CloudinaryImage_File
  shortDescription: String
  filters(
    where: FilterWhereInput! = {}
    orderBy: [FilterOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Filter!]
  filtersCount(where: FilterWhereInput! = {}): Int
  content: MediaItem_content_Document
  videos: JSON
  file: AzureStorageFileFieldOutput
}

type MediaItem_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

interface AzureStorageFileFieldOutput {
  filename: String!
  filesize: Int!
  ref: String!
  url: String!
}

input MediaItemWhereUniqueInput {
  id: ID
  key: String
}

type AzureStorageFileFieldOutputType implements AzureStorageFileFieldOutput {
  filename: String!
  filesize: Int!
  ref: String!
  url: String!
}

input MediaItemWhereInput {
  AND: [MediaItemWhereInput!]
  OR: [MediaItemWhereInput!]
  NOT: [MediaItemWhereInput!]
  id: IDFilter
  title: StringFilter
  key: StringFilter
  createdDate: DateTimeNullableFilter
  enabled: BooleanFilter
  shortDescription: StringFilter
  filters: FilterManyRelationFilter
}

input FilterManyRelationFilter {
  every: FilterWhereInput
  some: FilterWhereInput
  none: FilterWhereInput
}

input MediaItemOrderByInput {
  id: OrderDirection
  title: OrderDirection
  key: OrderDirection
  createdDate: OrderDirection
  enabled: OrderDirection
  shortDescription: OrderDirection
}

input MediaItemUpdateInput {
  title: String
  key: String
  createdDate: DateTime
  enabled: Boolean
  thumbnail: Upload
  shortDescription: String
  filters: FilterRelateToManyForUpdateInput
  content: JSON
  videos: JSON
  file: AzureStorageFileFieldInput
}

input FilterRelateToManyForUpdateInput {
  disconnect: [FilterWhereUniqueInput!]
  set: [FilterWhereUniqueInput!]
  create: [FilterCreateInput!]
  connect: [FilterWhereUniqueInput!]
}

input AzureStorageFileFieldInput {
  upload: Upload
  ref: String
}

input MediaItemUpdateArgs {
  where: MediaItemWhereUniqueInput!
  data: MediaItemUpdateInput!
}

input MediaItemCreateInput {
  title: String
  key: String
  createdDate: DateTime
  enabled: Boolean
  thumbnail: Upload
  shortDescription: String
  filters: FilterRelateToManyForCreateInput
  content: JSON
  videos: JSON
  file: AzureStorageFileFieldInput
}

input FilterRelateToManyForCreateInput {
  create: [FilterCreateInput!]
  connect: [FilterWhereUniqueInput!]
}

type NewsItem {
  id: ID!
  title: String
  key: String
  createdDate: DateTime
  enabled: Boolean
  thumbnail: CloudinaryImage_File
  thumbAltText: String
  publishDate: DateTime
  externalLink: String
  blurb: String
  body: NewsItem_body_Document
}

type NewsItem_body_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input NewsItemWhereUniqueInput {
  id: ID
  key: String
}

input NewsItemWhereInput {
  AND: [NewsItemWhereInput!]
  OR: [NewsItemWhereInput!]
  NOT: [NewsItemWhereInput!]
  id: IDFilter
  title: StringFilter
  key: StringFilter
  createdDate: DateTimeNullableFilter
  enabled: BooleanFilter
  thumbAltText: StringFilter
  publishDate: DateTimeFilter
  externalLink: StringFilter
  blurb: StringFilter
}

input NewsItemOrderByInput {
  id: OrderDirection
  title: OrderDirection
  key: OrderDirection
  createdDate: OrderDirection
  enabled: OrderDirection
  thumbAltText: OrderDirection
  publishDate: OrderDirection
  externalLink: OrderDirection
  blurb: OrderDirection
}

input NewsItemUpdateInput {
  title: String
  key: String
  createdDate: DateTime
  enabled: Boolean
  thumbnail: Upload
  thumbAltText: String
  publishDate: DateTime
  externalLink: String
  blurb: String
  body: JSON
}

input NewsItemUpdateArgs {
  where: NewsItemWhereUniqueInput!
  data: NewsItemUpdateInput!
}

input NewsItemCreateInput {
  title: String
  key: String
  createdDate: DateTime
  enabled: Boolean
  thumbnail: Upload
  thumbAltText: String
  publishDate: DateTime
  externalLink: String
  blurb: String
  body: JSON
}

type Person {
  id: ID!
  name: String
  title: String
  createdDate: DateTime
  enabled: Boolean
  image: CloudinaryImage_File
  blurb: String
  remembrance: String
  content: Person_content_Document
}

type Person_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input PersonWhereUniqueInput {
  id: ID
}

input PersonWhereInput {
  AND: [PersonWhereInput!]
  OR: [PersonWhereInput!]
  NOT: [PersonWhereInput!]
  id: IDFilter
  name: StringFilter
  title: StringFilter
  createdDate: DateTimeNullableFilter
  enabled: BooleanFilter
  blurb: StringFilter
  remembrance: StringFilter
}

input PersonOrderByInput {
  id: OrderDirection
  name: OrderDirection
  title: OrderDirection
  createdDate: OrderDirection
  enabled: OrderDirection
  blurb: OrderDirection
  remembrance: OrderDirection
}

input PersonUpdateInput {
  name: String
  title: String
  createdDate: DateTime
  enabled: Boolean
  image: Upload
  blurb: String
  remembrance: String
  content: JSON
}

input PersonUpdateArgs {
  where: PersonWhereUniqueInput!
  data: PersonUpdateInput!
}

input PersonCreateInput {
  name: String
  title: String
  createdDate: DateTime
  enabled: Boolean
  image: Upload
  blurb: String
  remembrance: String
  content: JSON
}

type Studio {
  id: ID!
  name: String
  key: String
  createdDate: DateTime
  enabled: Boolean
  order: Int
  thumbnail: CloudinaryImage_File
  blurb: String
  filters(
    where: FilterWhereInput! = {}
    orderBy: [FilterOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Filter!]
  filtersCount(where: FilterWhereInput! = {}): Int
  content: Studio_content_Document
}

type Studio_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input StudioWhereUniqueInput {
  id: ID
  key: String
}

input StudioWhereInput {
  AND: [StudioWhereInput!]
  OR: [StudioWhereInput!]
  NOT: [StudioWhereInput!]
  id: IDFilter
  name: StringFilter
  key: StringFilter
  createdDate: DateTimeNullableFilter
  enabled: BooleanFilter
  order: IntNullableFilter
  blurb: StringFilter
  filters: FilterManyRelationFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input StudioOrderByInput {
  id: OrderDirection
  name: OrderDirection
  key: OrderDirection
  createdDate: OrderDirection
  enabled: OrderDirection
  order: OrderDirection
  blurb: OrderDirection
}

input StudioUpdateInput {
  name: String
  key: String
  createdDate: DateTime
  enabled: Boolean
  order: Int
  thumbnail: Upload
  blurb: String
  filters: FilterRelateToManyForUpdateInput
  content: JSON
}

input StudioUpdateArgs {
  where: StudioWhereUniqueInput!
  data: StudioUpdateInput!
}

input StudioCreateInput {
  name: String
  key: String
  createdDate: DateTime
  enabled: Boolean
  order: Int
  thumbnail: Upload
  blurb: String
  filters: FilterRelateToManyForCreateInput
  content: JSON
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createAbout(data: AboutCreateInput!): About
  createAbouts(data: [AboutCreateInput!]!): [About]
  updateAbout(where: AboutWhereUniqueInput!, data: AboutUpdateInput!): About
  updateAbouts(data: [AboutUpdateArgs!]!): [About]
  deleteAbout(where: AboutWhereUniqueInput!): About
  deleteAbouts(where: [AboutWhereUniqueInput!]!): [About]
  createBigPicture(data: BigPictureCreateInput!): BigPicture
  createBigPictures(data: [BigPictureCreateInput!]!): [BigPicture]
  updateBigPicture(
    where: BigPictureWhereUniqueInput!
    data: BigPictureUpdateInput!
  ): BigPicture
  updateBigPictures(data: [BigPictureUpdateArgs!]!): [BigPicture]
  deleteBigPicture(where: BigPictureWhereUniqueInput!): BigPicture
  deleteBigPictures(where: [BigPictureWhereUniqueInput!]!): [BigPicture]
  createCommunity(data: CommunityCreateInput!): Community
  createCommunities(data: [CommunityCreateInput!]!): [Community]
  updateCommunity(
    where: CommunityWhereUniqueInput!
    data: CommunityUpdateInput!
  ): Community
  updateCommunities(data: [CommunityUpdateArgs!]!): [Community]
  deleteCommunity(where: CommunityWhereUniqueInput!): Community
  deleteCommunities(where: [CommunityWhereUniqueInput!]!): [Community]
  createEvent(data: EventCreateInput!): Event
  createEvents(data: [EventCreateInput!]!): [Event]
  updateEvent(where: EventWhereUniqueInput!, data: EventUpdateInput!): Event
  updateEvents(data: [EventUpdateArgs!]!): [Event]
  deleteEvent(where: EventWhereUniqueInput!): Event
  deleteEvents(where: [EventWhereUniqueInput!]!): [Event]
  createFilter(data: FilterCreateInput!): Filter
  createFilters(data: [FilterCreateInput!]!): [Filter]
  updateFilter(where: FilterWhereUniqueInput!, data: FilterUpdateInput!): Filter
  updateFilters(data: [FilterUpdateArgs!]!): [Filter]
  deleteFilter(where: FilterWhereUniqueInput!): Filter
  deleteFilters(where: [FilterWhereUniqueInput!]!): [Filter]
  createHome(data: HomeCreateInput!): Home
  createHomePage(data: [HomeCreateInput!]!): [Home]
  updateHome(where: HomeWhereUniqueInput!, data: HomeUpdateInput!): Home
  updateHomePage(data: [HomeUpdateArgs!]!): [Home]
  deleteHome(where: HomeWhereUniqueInput!): Home
  deleteHomePage(where: [HomeWhereUniqueInput!]!): [Home]
  createHomeSlide(data: HomeSlideCreateInput!): HomeSlide
  createHomeSlides(data: [HomeSlideCreateInput!]!): [HomeSlide]
  updateHomeSlide(
    where: HomeSlideWhereUniqueInput!
    data: HomeSlideUpdateInput!
  ): HomeSlide
  updateHomeSlides(data: [HomeSlideUpdateArgs!]!): [HomeSlide]
  deleteHomeSlide(where: HomeSlideWhereUniqueInput!): HomeSlide
  deleteHomeSlides(where: [HomeSlideWhereUniqueInput!]!): [HomeSlide]
  createMediaItem(data: MediaItemCreateInput!): MediaItem
  createMediaItems(data: [MediaItemCreateInput!]!): [MediaItem]
  updateMediaItem(
    where: MediaItemWhereUniqueInput!
    data: MediaItemUpdateInput!
  ): MediaItem
  updateMediaItems(data: [MediaItemUpdateArgs!]!): [MediaItem]
  deleteMediaItem(where: MediaItemWhereUniqueInput!): MediaItem
  deleteMediaItems(where: [MediaItemWhereUniqueInput!]!): [MediaItem]
  createNewsItem(data: NewsItemCreateInput!): NewsItem
  createNewsItems(data: [NewsItemCreateInput!]!): [NewsItem]
  updateNewsItem(
    where: NewsItemWhereUniqueInput!
    data: NewsItemUpdateInput!
  ): NewsItem
  updateNewsItems(data: [NewsItemUpdateArgs!]!): [NewsItem]
  deleteNewsItem(where: NewsItemWhereUniqueInput!): NewsItem
  deleteNewsItems(where: [NewsItemWhereUniqueInput!]!): [NewsItem]
  createPerson(data: PersonCreateInput!): Person
  createPeople(data: [PersonCreateInput!]!): [Person]
  updatePerson(where: PersonWhereUniqueInput!, data: PersonUpdateInput!): Person
  updatePeople(data: [PersonUpdateArgs!]!): [Person]
  deletePerson(where: PersonWhereUniqueInput!): Person
  deletePeople(where: [PersonWhereUniqueInput!]!): [Person]
  createStudio(data: StudioCreateInput!): Studio
  createStudios(data: [StudioCreateInput!]!): [Studio]
  updateStudio(where: StudioWhereUniqueInput!, data: StudioUpdateInput!): Studio
  updateStudios(data: [StudioUpdateArgs!]!): [Studio]
  deleteStudio(where: StudioWhereUniqueInput!): Studio
  deleteStudios(where: [StudioWhereUniqueInput!]!): [Studio]
}

type Query {
  abouts(
    where: AboutWhereInput! = {}
    orderBy: [AboutOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [About!]
  about(where: AboutWhereUniqueInput!): About
  aboutsCount(where: AboutWhereInput! = {}): Int
  bigPictures(
    where: BigPictureWhereInput! = {}
    orderBy: [BigPictureOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [BigPicture!]
  bigPicture(where: BigPictureWhereUniqueInput!): BigPicture
  bigPicturesCount(where: BigPictureWhereInput! = {}): Int
  communities(
    where: CommunityWhereInput! = {}
    orderBy: [CommunityOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Community!]
  community(where: CommunityWhereUniqueInput!): Community
  communitiesCount(where: CommunityWhereInput! = {}): Int
  events(
    where: EventWhereInput! = {}
    orderBy: [EventOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Event!]
  event(where: EventWhereUniqueInput!): Event
  eventsCount(where: EventWhereInput! = {}): Int
  filters(
    where: FilterWhereInput! = {}
    orderBy: [FilterOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Filter!]
  filter(where: FilterWhereUniqueInput!): Filter
  filtersCount(where: FilterWhereInput! = {}): Int
  homePage(
    where: HomeWhereInput! = {}
    orderBy: [HomeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Home!]
  home(where: HomeWhereUniqueInput!): Home
  homePageCount(where: HomeWhereInput! = {}): Int
  homeSlides(
    where: HomeSlideWhereInput! = {}
    orderBy: [HomeSlideOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [HomeSlide!]
  homeSlide(where: HomeSlideWhereUniqueInput!): HomeSlide
  homeSlidesCount(where: HomeSlideWhereInput! = {}): Int
  mediaItems(
    where: MediaItemWhereInput! = {}
    orderBy: [MediaItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [MediaItem!]
  mediaItem(where: MediaItemWhereUniqueInput!): MediaItem
  mediaItemsCount(where: MediaItemWhereInput! = {}): Int
  newsItems(
    where: NewsItemWhereInput! = {}
    orderBy: [NewsItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [NewsItem!]
  newsItem(where: NewsItemWhereUniqueInput!): NewsItem
  newsItemsCount(where: NewsItemWhereInput! = {}): Int
  people(
    where: PersonWhereInput! = {}
    orderBy: [PersonOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Person!]
  person(where: PersonWhereUniqueInput!): Person
  peopleCount(where: PersonWhereInput! = {}): Int
  studios(
    where: StudioWhereInput! = {}
    orderBy: [StudioOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Studio!]
  studio(where: StudioWhereUniqueInput!): Studio
  studiosCount(where: StudioWhereInput! = {}): Int
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
